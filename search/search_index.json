{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"itog/","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u044b \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket threading, \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b HTTP \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u0435\u0440\u0432\u0435\u0440, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0439 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b.</p>"},{"location":"task_1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP</p> <p>server</p> <pre><code>import socket\n\nif __name__ == '__main__':\n    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as conn:\n        conn.bind(('127.0.0.1', 14900))\n        while True:\n            message_from, cl_address = conn.recvfrom(16384)\n            decode_message = message_from.decode(\"utf-8\")\n            print('From client: ' + decode_message)\n            message_to = 'Hello, client'.encode('utf-8')\n            conn.sendto(message_to, cl_address)\n</code></pre> <p>client</p> <pre><code>import socket\n\nif __name__ == '__main__':\n    conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    try:\n        conn.sendto(\"Hello, server\".encode('utf-8'), (\"127.0.0.1\", 14900))\n        response = conn.recv(16384).decode('utf-8')\n        print('From server: ' + response)\n    except ConnectionResetError:\n        print(\"Server not avaliable\")\n\n</code></pre> <p>\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b:</p> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u041a\u043b\u0438\u0435\u043d\u0442 </p>"},{"location":"task_2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f.</p> <p>server</p> <pre><code>import socket\nimport math\n\n\ndef solve_quad_eq(a, b, c): \n    D = b ** 2 - 4 * a * c\n    sqrt_val = math.sqrt(abs(D))\n    if D &gt; 0:\n        return (-b + sqrt_val) / (2 * a), (-b - sqrt_val) / (2 * a)\n    elif D == 0:\n        return -b / (2 * a)\n    else:\n        return '\u041d\u0435\u0442 \u043a\u043e\u0440\u043d\u0435\u0439'\n\n\nif __name__ == '__main__':\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as conn:\n        conn.bind((\"127.0.0.1\", 14900))\n        conn.listen(10)\n        while True:\n            client, address = conn.accept()\n            client.sendall('Hello from server! \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e'.encode('utf-8'))\n            client_resp = client.recv(16384).decode('utf-8')\n            #print(f'{client_resp}')\n            try:\n                a, b, c = map(float, client_resp.split(','))\n                solve = str(solve_quad_eq(a, b, c)).encode('utf-8')\n                client.sendall(solve)\n            except:\n                client.sendall(\"\u041d\u0435\u0432\u0435\u0440\u043d\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435\".encode('utf-8'))\n</code></pre> <p>client</p> <pre><code>import socket\n\nif __name__ == '__main__':\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as conn:\n        conn.connect((\"127.0.0.1\", 14900))\n        response = conn.recv(16384).decode('utf-8')\n        print('From server: ' + response)\n        coef = input().encode('utf-8')\n        conn.sendall(coef)\n        response = conn.recv(16384).decode('utf-8')\n        print('Solution: ' + response)\n</code></pre> <p>\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b:</p> <p>\u041a\u043b\u0438\u0435\u043d\u0442 </p>"},{"location":"task_3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p> <p>server</p> <pre><code>import socket\n\n\nif __name__ == '__main__':\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as conn:\n        conn.bind((\"127.0.0.1\", 14900))\n        conn.listen(10)\n        while True:\n            client, address = conn.accept()\n            with open('index.html', 'r') as file:\n                html = file.read()\n            print(f\"Connected by {address}\")\n            client.send((\"HTTP/1.1 200 OK \\n\" + \"Content-Type: text/html \\n\" + html).encode('utf-8'))\n</code></pre> <p>client</p> <pre><code>import socket\n\nif __name__ == '__main__':\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.connect((\"127.0.0.1\", 14900))\n    response = conn.recv(16384).decode('utf-8')\n    print('From server: ' + response)\n</code></pre> <p>html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Hello&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, client!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b:</p> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u041a\u043b\u0438\u0435\u043d\u0442 \u0421\u0435\u0440\u0432\u0435\u0440 </p>"},{"location":"task_4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.</p> <p>server</p> <pre><code>import socket\nfrom threading import Thread\n\n\ndef start_chat():\n    global clients\n    while True:\n        client, address = conn.accept()\n        name = client.recv(2048).decode('utf-8')\n        clients[client] = name\n        post_messages(f\"\u041a\u043b\u0438\u0435\u043d\u0442 {name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443\", client)\n        Thread(target=get_messages, args=(client,)).start()\n\n\ndef get_messages(client):\n    global clients\n    while True:\n        try:\n            message = client.recv(16384).decode()\n            if message:\n                post_messages(message, client)\n        except:\n            name = clients[client]\n            post_messages(f\"{name} \u0432\u044b\u0448\u0435\u043b \u0438\u0437 \u0447\u0430\u0442\u0430\", client)\n            del clients[client]\n            client.close()\n            break\n\n\ndef post_messages(message, client):\n    global clients\n    for c in clients:\n        if c != client:\n            c.send(f\"{clients[client]}: {message}\".encode('utf-8'))\n    print(f\"{clients[client]}: {message}\")\n\n\nif __name__ == '__main__':\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.bind((\"127.0.0.1\", 14900))\n    conn.listen(10)\n    clients = {}\n    start_chat()\n</code></pre> <p>client</p> <pre><code>import socket\nfrom threading import Thread\n\n\ndef get_messages():\n    while True:\n        get = conn.recv(16384).decode(\"utf-8\")\n        print(get)\n\n\ndef post_messages():\n    while True:\n        post = input()\n        conn.sendall(post.encode('utf-8'))\n\n\nif __name__ == '__main__':\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.connect((\"127.0.0.1\", 14900))\n    name = input(\"\u0412\u0430\u0448\u0435 \u0438\u043c\u044f: \\n\")\n    receive_th = Thread(target=get_messages)\n    receive_th.start()\n    respond_th = Thread(target=post_messages)\n    respond_th.start()\n\n</code></pre> <p>\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b:</p> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u041a\u043b\u0438\u0435\u043d\u0442 1 \u041a\u043b\u0438\u0435\u043d\u0442 2 \u041a\u043b\u0438\u0435\u043d\u0442 3 </p>"},{"location":"task_5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</p> <p>server</p> <pre><code>from MyHTTPServer import MyHTTPServer\n\n\nif __name__ == '__main__':\n    HOST = '127.0.0.1'\n    SERVER_PORT = 14900\n    my_server = MyHTTPServer(HOST, SERVER_PORT)\n    my_server.serve_forever()\n</code></pre> <p>MyHTTPServer</p> <pre><code>import socket\nfrom email.parser import Parser\nfrom Request import Request\nfrom Response import Response\n\n\nMAX_LINE = 64 * 1024\nMAX_HEADERS = 100\n\n\nclass MyHTTPServer:\n    def __init__(self, host, port):\n        self.port = port\n        self.host = host\n        self.conn = None\n        self.data = {}  # {subject: [grades]}\n\n    def serve_forever(self):\n        server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        try:\n            server_sock.bind((self.host, self.port))\n            server_sock.listen(10)\n            print(\"Server is running...\")\n            while True:\n                client_socket, _ = server_sock.accept()\n                try:\n                    self.serve_client(client_socket)\n                except Exception as e:\n                    print('Client serving failed', e)\n        finally:\n            server_sock.close()\n\n    def serve_client(self, conn):\n        try:\n            req = self.parse_request(conn)\n            response = self.handle_request(req)\n            self.send_response(conn, response)\n        except ConnectionResetError:\n            conn = None\n        except Exception as e:\n            print(\"Error\", e)\n        if conn:\n            conn.close()\n\n    def parse_request(self, conn):\n        rfile = conn.makefile('rb')\n        method, target, ver = self.parse_request_line(rfile)\n\n        headers = self.parse_headers(rfile)\n\n        host = headers.get('Host')\n        if not host:\n            raise Exception('Host header is missing')\n\n        return Request(method, target, ver, headers, rfile)\n\n    def parse_request_line(self, rfile):\n        raw = rfile.readline(MAX_LINE + 1)\n        if len(raw) &gt; MAX_LINE:\n            raise Exception('Request line is too long')\n\n        req_line = str(raw, 'iso-8859-1').rstrip('\\r\\n')\n        words = req_line.split()\n        if len(words) != 3:\n            raise Exception('Malformed request line')\n\n        method, target, ver = words\n        if ver != 'HTTP/1.1':\n            raise Exception('Unexpected HTTP version')\n\n        return method, target, ver\n\n\n    @staticmethod\n    def parse_headers(rfile):\n        headers = []\n\n        while True:\n            line = rfile.readline(MAX_LINE + 1)\n            if len(line) &gt; MAX_LINE:\n                raise Exception('Header line is too long')\n\n            if line in (b'\\r\\n', b'\\n', b''):\n                break\n\n            headers.append(line)\n            if len(headers) &gt; MAX_HEADERS:\n                raise Exception('Too many headers')\n\n        sheaders = b''.join(headers).decode('iso-8859-1')\n        return Parser().parsestr(sheaders)\n\n    def handle_request(self, req):\n        content_type = 'text/html; charset=utf-8'\n        body = str()\n        if req.path == '/' and req.method == 'POST':\n            subject = req.query_body['subject'][0]\n            grade = req.query_body['grade'][0]\n            try:\n                self.data[subject].append(grade)\n            except KeyError:\n                self.data[subject] = [grade]\n            body = self.handle_get()\n        elif req.method == 'GET':\n            if req.path == '/add_grade':\n                with open(\"index.html\", encoding='utf-8') as index:\n                    body1 = index.read()\n                body = body1\n            elif req.path == '/':\n                body = self.handle_get()\n        body = body.encode('utf-8')\n        headers = [('Content-Type', content_type),\n                   ('Content-Length', len(body))]\n        return Response(200, 'OK', headers, body)\n\n    def handle_get(self):\n        body = \"\"\"\n                &lt;!DOCTYPE html&gt;\n                &lt;html lang=\"ru\"&gt;\n                &lt;head&gt;\n                &lt;meta charset=\"UTF-8\"&gt;\n                &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n                &lt;/head&gt;\n                &lt;body&gt;\n                    &lt;h2&gt;&lt;center&gt;\u0412\u0435\u0434\u043e\u043c\u043e\u0441\u0442\u044c&lt;/center&gt;&lt;/h2&gt;\n                    &lt;table style=\"border-collapse: collapse; width: 70%;\" align=\"center\"&gt;\n                        &lt;tr&gt;\n                            &lt;th style=\"border: 1px solid black; padding: 4px;\"&gt;\u041f\u0440\u0435\u0434\u043c\u0435\u0442&lt;/th&gt;\n                            &lt;th style=\"border: 1px solid black; padding: 4px;\"&gt;\u041e\u0446\u0435\u043d\u043a\u0430&lt;/th&gt;\n                        &lt;/tr&gt;\n                \"\"\"\n        for subject, grades in self.data.items():\n            for grade in grades:\n                body += f\"\"\"&lt;tr&gt;\n                                &lt;td style=\"border: 1px solid black; padding: 4px;\"&gt;{subject}&lt;/td&gt;\n                                &lt;td style=\"border: 1px solid black; padding: 4px;\"&gt;{grade}&lt;/td&gt;\n                            &lt;/tr&gt;\n                        \"\"\"\n\n        body += \"\"\"\n                &lt;/table&gt;\n                    &lt;form action=\"/add_grade\" style=\"padding: 10px;\"&gt;\n                        &lt;center&gt;&lt;input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435\"&gt;&lt;/center&gt;\n                    &lt;/form&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n                \"\"\"\n        return body\n\n    @staticmethod\n    def send_response(conn, resp):\n        wfile = conn.makefile('wb')\n        status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n'\n        wfile.write(status_line.encode('iso-8859-1'))\n\n        if resp.headers:\n            for (key, value) in resp.headers:\n                header_line = f'{key}: {value}\\r\\n'\n                wfile.write(header_line.encode('iso-8859-1'))\n\n        wfile.write(b'\\r\\n')\n\n        if resp.body:\n            wfile.write(resp.body)\n\n        wfile.flush()\n        wfile.close()\n</code></pre> <p>Request</p> <pre><code>from functools import lru_cache\nfrom urllib.parse import parse_qs, urlparse\n\n\n\nclass Request:\n    def __init__(self, method, target, version, headers, rfile):\n        self.method = method\n        self.target = target\n        self.version = version\n        self.headers = headers\n        self.rfile = rfile\n\n    @property\n    def path(self):\n        return self.url.path\n\n    @property\n    def body(self):\n        size = self.headers.get('Content-Length')\n        if not size:\n            return None\n        content = self.rfile.read(int(size))\n        return content.decode('utf-8')\n\n    @property\n    @lru_cache(maxsize=None)\n    def url(self):\n        return urlparse(self.target)\n\n    @property\n    @lru_cache(maxsize=None)\n    def query(self):\n        return parse_qs(self.url.query)\n\n    @property\n    @lru_cache(maxsize=None)\n    def query_body(self):\n        return parse_qs(self.body)\n</code></pre> <p>Response</p> <pre><code>class Response:\n    def __init__(self, status, reason, headers=None, body=None):\n        self.status = status\n        self.reason = reason\n        self.headers = headers\n        self.body = body\n</code></pre> <p>html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;&lt;center&gt;\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435&lt;/center&gt;&lt;/h2&gt;\n    &lt;p&gt;&lt;center&gt;\n        &lt;form method=\"POST\" action=\"/\"&gt;\n            &lt;h4&gt;\u041f\u0440\u0435\u0434\u043c\u0435\u0442: &lt;/h4&gt;&lt;input type=\"text\" id=\"subject\" name=\"subject\"&gt;\n            &lt;br&gt;\n            &lt;br&gt;\n            &lt;h4&gt;\u041e\u0446\u0435\u043d\u043a\u0430: &lt;/h4&gt;&lt;input type=\"text\" id=\"grade\" name=\"grade\"&gt;\n            &lt;br&gt;\n            &lt;br&gt;\n            &lt;input type=\"submit\" value=\"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c\"&gt;\n            &lt;br&gt;\n            &lt;br&gt;\n        &lt;/form&gt;\n    &lt;/center&gt;&lt;/p&gt;\n    &lt;form action=\"/\"&gt;\n        &lt;center&gt;&lt;input type=\"submit\" value=\"\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u0443\u044e\"&gt;&lt;/center&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n</code></pre> <p>\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b:</p> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f </p>"}]}